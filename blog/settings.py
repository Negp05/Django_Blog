"""
Django settings for blog project.
Generated by 'django-admin startproject' using Django 5.2.6.
"""

from pathlib import Path
import os
import dj_database_url  

# ==========================
# RUTAS Y CONFIGURACI√ìN BASE
# ==========================
BASE_DIR = Path(__file__).resolve().parent.parent

# ==========================
# SEGURIDAD
# ==========================
SECRET_KEY = os.environ.get('SECRET_KEY', 'django-insecure-#f7tdvmtxenwnynaukss6&^2cj$iyy^f4fbsve4f^*7&f)7dki')

DEBUG = os.environ.get('DEBUG', 'False').lower() == 'true'
#DEBUG = True
ALLOWED_HOSTS = ["*", ".railway.app", "localhost", "127.0.0.1"]

# === AGREGAR ESTA CONFIGURACI√ìN CSRF ===
CSRF_TRUSTED_ORIGINS = [
    'https://*.railway.app',
    'https://*.up.railway.app',
]

# Configuraci√≥n de cookies seguras
CSRF_COOKIE_SECURE = True
SESSION_COOKIE_SECURE = True

# Para desarrollo local
if DEBUG:
    CSRF_TRUSTED_ORIGINS = ['http://localhost:8000', 'http://127.0.0.1:8000']
    CSRF_COOKIE_SECURE = False
    SESSION_COOKIE_SECURE = False

# ==========================
# APLICACIONES INSTALADAS
# ==========================
INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'posts',
    'auth_perfiles',
    'social',
]

# ==========================
# MIDDLEWARE
# ==========================
MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'whitenoise.middleware.WhiteNoiseMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
]

# ==========================
# CONFIGURACI√ìN DE URL Y WSGI
# ==========================
ROOT_URLCONF = 'blog.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [BASE_DIR / "templates"],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'blog.wsgi.application'

# ==========================
# BASE DE DATOS
# ==========================
print("üöÄ CONFIGURANDO LA BASE DE DATOS...")

RAILWAY_ENV = os.environ.get("RAILWAY_ENVIRONMENT", None)
DATABASE_URL = os.environ.get("DATABASE_URL", None)

if RAILWAY_ENV or (DATABASE_URL and DATABASE_URL.startswith("postgres")):
    # ‚úÖ Usar PostgreSQL en Railway
    DATABASES = {
        "default": dj_database_url.config(
            default=DATABASE_URL,
            conn_max_age=600,
            conn_health_checks=True,
        )
    }
    print("‚úÖ USANDO POSTGRESQL EN PRODUCCI√ìN")
else:
    # ‚úÖ Usar SQLite localmente
    DATABASES = {
        "default": {
            "ENGINE": "django.db.backends.sqlite3",
            "NAME": BASE_DIR / "db.sqlite3",
        }
    }
    print("‚úÖ USANDO SQLITE EN DESARROLLO LOCAL")

# ==========================
# VALIDACI√ìN DE CONTRASE√ëAS
# ==========================
AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]

# ==========================
# INTERNACIONALIZACI√ìN
# ==========================
LANGUAGE_CODE = 'en-us'
TIME_ZONE = 'UTC'
USE_I18N = True
USE_TZ = True

# ==========================
# ARCHIVOS EST√ÅTICOS
# ==========================
STATIC_URL = '/static/'
STATICFILES_DIRS = [BASE_DIR / "static"]
STATIC_ROOT = os.path.join(BASE_DIR, 'staticfiles')

# WhiteNoise para servir archivos est√°ticos en producci√≥n
STATICFILES_STORAGE = 'whitenoise.storage.CompressedManifestStaticFilesStorage'

# ==========================
# CONFIGURACI√ìN FINAL
# ==========================
DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'